{"version":3,"sources":["Tmdb.js","components/MovieRow/MovieRow.js","components/FeaturedMovie/FeaturedMovie.js","components/Header/Header.js","components/Footer/Footer.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","overview","href","id","join","black","role","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","loadAll","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","console","log","scrollListener","scrollY","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.367e9fbe.chunk.js","sourcesContent":["const API_KEY = '985833d5bfa912bfcedf593847b8eb79';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\n/*\r\n- originais da netflix\r\n- recomendados (trending)\r\n- em alta (top rated)\r\n- acao\r\n- comedia \r\n- terror  \r\n- romance  \r\n- documetarios\r\n*/\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async ()=> {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_networks=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para Voçê',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'actions',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comerdy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieId, type)=> {\r\n        let info = {};\r\n\r\n        if(movieId) {\r\n            switch(type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                break;\r\n                default:\r\n                    info = null;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport './MovieRow.css';\r\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';\r\nimport ArrowBackIosIcon from '@mui/icons-material/ArrowBackIos';\r\n\r\nexport default ({title, items}) => {\r\n    const [scrollX, setScrollX] = useState(-400);\r\n\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n        if(x > 0) {\r\n            x = 0;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let listW = items.results.length * 150;\r\n        if((window.innerWidth - listW) > x) {\r\n            x = (window.innerWidth - listW) - 70;\r\n        }\r\n        setScrollX(x);\r\n    }\r\n\r\n    return (\r\n        <div className=\"MovieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movierow--set\">\r\n                <div className=\"movierow--left\" onClick={handleLeftArrow}>\r\n                    <ArrowBackIosIcon style={{fontSize: 20}}/>\r\n                </div>  \r\n                <div className=\"movierow--right\" onClick={handleRightArrow}>\r\n                    <ArrowForwardIosIcon  style={{fontSize: 20}}/>\r\n                </div>                           \r\n            </div>\r\n            <div className=\"movieRow--area\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    {items.results?.length > 0 && items.results.map((item, key)=>(\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './FeaturedMovie.css';\r\n\r\nexport default ({item}) => {\r\n    let firstDate = new Date(item.first_air_date);\r\n    let genres = [];\r\n    for(let i in item.genres) {\r\n        genres.push( item.genres[i].name );\r\n    }\r\n    return (\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                        <div className=\"featured--description\">{item.overview}</div>\r\n                        <div className=\"featured--buttons\">\r\n                            <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\r\n                            <a href={`/list/add${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\r\n                        </div>\r\n                        <div className=\"featured--genres\"><strong>Gêneros: </strong>{genres.join(', ')}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    ); \r\n}","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default ({black}) => {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"./\">\r\n                  <img src=\"https://sm.ign.com/ign_br/news/n/netflix-ju/netflix-just-bought-the-rights-to-an-rnosleep-horror-story_r3wy.jpg\"/>\r\n                </a>\r\n            </div> \r\n            <div className=\"header--user\">\r\n                <a href=\"./\">\r\n                  <img src=\"https://i.pinimg.com/564x/e3/94/30/e39430434d2b8207188f880ac66c6411.jpg\"/>\r\n                </a>\r\n            </div> \r\n        </header>\r\n    );\r\n}","import React from 'react';\r\nimport './Footer.css';\r\nimport LogoDevIcon from '@mui/icons-material/LogoDev';\r\n\r\nexport default () => {\r\n    return (\r\n        <footer>\r\n          <p className=\"footer--duv\">Duvidas? Ligue<a href=\"http://\"></a></p>\r\n          <p>\r\n            Feito por <span role=\"img\" aria-label=\"coração\"></span><LogoDevIcon /> Leonardo Nogueira<br/>\r\n            Direitos de imagem para Netflix<br/>\r\n            Dados pegos do site themoviedb.org\r\n          </p>\r\n        </footer>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie/FeaturedMovie';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\n\nexport default ()=> {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(()=> {\n    const loadAll = async () => {\n      // pegando a lista total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegar o filme em Destaque\n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n      console.log(chosenInfo);\n    }\n\n    loadAll();\n  }, []);\n\n  useEffect(()=>{\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, [])\n\n  return (\n    <>\n      <div className=\"app--row\">\n\n        <Header black={blackHeader} />\n\n        <section className=\"app--area\">\n          {featuredData &&\n            <FeaturedMovie item={featuredData} />\n          }\n          <div className=\"app--list\">\n            {movieList.map((item, key)=>(\n              <div  className=\"MovieRow--Item\">\n                <MovieRow key={key} title={item.title} items={item.items} />\n              </div>\n            ))}\n          </div>          \n        </section>\n\n        <Footer />\n      </div>\n    </>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}